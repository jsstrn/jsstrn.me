<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/"><channel><title>best practices on Jesstern</title><link>https://jsstrn.me/tags/best-practices/</link><description>Recent content in best practices on Jesstern</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><atom:link href="https://jsstrn.me/tags/best-practices/index.xml" rel="self" type="application/rss+xml"/><item><title>Guidelines for building CLI tools</title><link>https://jsstrn.me/notes/cli-guidelines/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://jsstrn.me/notes/cli-guidelines/</guid><description>Best practices for building CLI tools</description></item><item><title>How to structure your unit tests</title><link>https://jsstrn.me/notes/testing-arrange-act-assert/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://jsstrn.me/notes/testing-arrange-act-assert/</guid><description>When writing test cases, we can organize our tests into three segments
Arrange – set variables, stubs, mocks, spies, etc Act – the action that you wish to assert on Assert – make an assertion on the expected and actual results Here&amp;rsquo;s a simple example:
test(&amp;#34;renders correct number of books&amp;#34;, () =&amp;gt; { // arrange const books = [ {title: &amp;#34;Animal Farm&amp;#34;, author: &amp;#34;George Orwell&amp;#34;}, {title: &amp;#34;Nineteen Eighty-Four&amp;#34;, author: &amp;#34;George Orwell&amp;#34;}, {title: &amp;#34;Down and Out in Paris and London&amp;#34;, author: &amp;#34;George Orwell&amp;#34;}, ] // act const { queryAllByTestId } = render(&amp;lt;BookList books={books} /&amp;gt;); // assert expect(queryAllByTestId(&amp;#39;book-item&amp;#39;).</description></item><item><title>PEP 20: Zen of Python</title><link>https://jsstrn.me/notes/pep-20-zen-of-python/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://jsstrn.me/notes/pep-20-zen-of-python/</guid><description>Here&amp;rsquo;s a small sample from Zen of Python:
Beautiful is better than ugly. Explicit is better than implicit. Simple is better than complex. Complex is better than complicated. Flat is better than nested. Readability counts.</description></item><item><title>The 3-2-1 backup rule</title><link>https://jsstrn.me/notes/3-2-1-backup-rule/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://jsstrn.me/notes/3-2-1-backup-rule/</guid><description>Create 3 copies of your data – 1 primary and 2 backup copies Have 2 types of storage mediums – e.g. hard disk drives and cloud storage Store 1 of these backups offsite – preferably on the cloud Let&amp;rsquo;s say you have some files on your computer. You want to make a backup copy of your files on an external hard disk drive and have another copy on a cloud storage.</description></item></channel></rss>