<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/"><channel><title>java on Jesstern</title><link>https://jsstrn.me/tags/java/</link><description>Recent content in java on Jesstern</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><atom:link href="https://jsstrn.me/tags/java/index.xml" rel="self" type="application/rss+xml"/><item><title>Handling precision values in Java with BigDecimal</title><link>https://jsstrn.me/notes/java-handling-precision-values-with-bigdecimal/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://jsstrn.me/notes/java-handling-precision-values-with-bigdecimal/</guid><description>When it comes to handling values that require precision, using data types like float and double may result in unexpected behavior.
double value = 0.012; double sum = value + value + value; In this example, we would expect the sum to be 0.036, but instead we get 0.036000000000000004.
This can lead to a lot of issues when we are dealing with currency conversion. For this reason, it is recommended to use BigDecimal instead.</description></item></channel></rss>