<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/"><channel><title>javascript on Jesstern</title><link>https://jsstrn.me/tags/javascript/</link><description>Recent content in javascript on Jesstern</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><atom:link href="https://jsstrn.me/tags/javascript/index.xml" rel="self" type="application/rss+xml"/><item><title>Avoid using toBeTruthy() and toBeFalsy() matchers</title><link>https://jsstrn.me/notes/jest-avoid-tobetruthy-tobefalsy/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://jsstrn.me/notes/jest-avoid-tobetruthy-tobefalsy/</guid><description>Test assertions should be explicit.
If I&amp;rsquo;m trying to assert that something should be true I avoid using the toBeTruthy() matcher.
It&amp;rsquo;s important to realize that in JavaScript, all values are truthy unless they are defined as falsy. This means that as long as result is not a falsy value (e.g. false, &amp;quot;&amp;quot;, null, undefined, NaN, etc.), the assertion will pass.
expect(result).toBeTruthy() // passes if result is {} or [] or 1 Contrast it with this approach where result will only pass if its value is true.</description></item><item><title>Check if a variable is null or undefined in JavaScript</title><link>https://jsstrn.me/notes/js-check-null-undefined/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://jsstrn.me/notes/js-check-null-undefined/</guid><description>Use double question mark operator to check if a variable is null or undefined in JavaScript</description></item><item><title>Create an array from range of numbers</title><link>https://jsstrn.me/notes/js-array-range/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://jsstrn.me/notes/js-array-range/</guid><description>How to create an array of elements based on a range of numbers in JavaScript</description></item><item><title>Difference between for...of and for...in in JavaScript</title><link>https://jsstrn.me/notes/js-for-of-vs-for-in/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://jsstrn.me/notes/js-for-of-vs-for-in/</guid><description>for...of is for arrays The for...of statement iterates over values of an iterable (e.g. String, Array, Set, Map).
If we have 10 apples and we have 1 of them, we might say 1 of 10 apples. That&amp;rsquo;s one way to remember that for...of is for arrays.
const array = [&amp;#39;a&amp;#39;, &amp;#39;b&amp;#39;, &amp;#39;c&amp;#39;] for (const element of array) { // element =&amp;gt; &amp;#39;a&amp;#39;, &amp;#39;b&amp;#39;, &amp;#39;c&amp;#39; } for...in is for objects The for.</description></item><item><title>Implementing a frontend search functionality</title><link>https://jsstrn.me/notes/js-search-functionality/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://jsstrn.me/notes/js-search-functionality/</guid><description>Let&amp;rsquo;s say we have an online bookstore where we list all our available books. We want to be able to implement a search bar that can filter out results that match the title, author, publisher, etc.
Solutions like Algolia, Solr, or Elasticsearch are non-trivial solutions that require quite a bit of configuration and resources. These solutions may also be overkill if you have a small to moderately large dataset.
We can look at Fuse.</description></item><item><title>Iterate over an array in JavaScript</title><link>https://jsstrn.me/notes/js-iterate-over-array/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://jsstrn.me/notes/js-iterate-over-array/</guid><description>Using for...of This is the simplest approach to iterate over an array while still allowing you to break out of the loop.
Do not confuse with for...in which is for iterating over objects.
for (const element of array) { // your code here } Using a for loop This is the most versatile approach as it allows you to control the starting index, increment value, range, etc.
Use this approach if you&amp;rsquo;re not doing a straightforward iteration over an array.</description></item><item><title>Merging arrays in JavaScript without duplicates</title><link>https://jsstrn.me/notes/js-merge-arrays/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://jsstrn.me/notes/js-merge-arrays/</guid><description>How to merge two or more arrays in JavaScript</description></item><item><title>React Query</title><link>https://jsstrn.me/notes/react-query/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://jsstrn.me/notes/react-query/</guid><description>Fetch, cache and update data in React applications</description></item><item><title>Run Jest tests that match a describe block</title><link>https://jsstrn.me/notes/jest-match-name-tests/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://jsstrn.me/notes/jest-match-name-tests/</guid><description>How to run tests that only match the name in the describe block</description></item><item><title>Set the lower and upper bound limits of a variable in JavaScript</title><link>https://jsstrn.me/notes/js-math-min-max/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://jsstrn.me/notes/js-math-min-max/</guid><description>Use Math.min() and Math.max() to set the upper and lower bound limits of a variable</description></item><item><title>Watch for file changes as you run your tests</title><link>https://jsstrn.me/notes/jest-run-tests-watch/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://jsstrn.me/notes/jest-run-tests-watch/</guid><description>How to run your tests as your files change in Jest</description></item><item><title>What are truthy values in JavaScript?</title><link>https://jsstrn.me/notes/js-all-values-truthy/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://jsstrn.me/notes/js-all-values-truthy/</guid><description>In JavaScript, all values are truthy unless they are defined as falsy. Here&amp;rsquo;s a complete list of falsy values.
Any value that isn&amp;rsquo;t falsy is by definition truthy. This means that an empty array [] or an empty object {} or a negative number are all considered truthy, but an empty string &amp;quot;&amp;quot; is falsy.
Consider the following example,
const name = &amp;#34;&amp;#34;; if (!name) { // your code here } While the code above works for checking for an empty string, the same cannot be said when checking for an empty array.</description></item><item><title>Why you should always use strict equality</title><link>https://jsstrn.me/notes/js-equality-table/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://jsstrn.me/notes/js-equality-table/</guid><description>JavaScript equality table</description></item></channel></rss>